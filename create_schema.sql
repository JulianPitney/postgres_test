-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE scientific_data."lightsheet_scans"
(
    "LIGHTSHEET_SCAN_ID" bigint NOT NULL,
    "LIGHTSHEET_CONFIG_ID" bigint NOT NULL,
    "SAMPLE_ID" bigint NOT NULL,
    "RESEARCHER_ID" bigint NOT NULL,
    "SCAN_NAME" character varying NOT NULL,
    "SCAN_URL" character varying NOT NULL,
    "SCAN_SIZE_BYTES" bigint NOT NULL,
    "STACK_SIZE_Z" integer NOT NULL,
    "STACK_SIZE_Y" integer NOT NULL,
    "STACK_SIZE_X" integer NOT NULL,
    "TILED_SCAN" boolean NOT NULL,
    "TIMELAPSE_SCAN" boolean NOT NULL,
    "WAS_DECONVOLVED" boolean NOT NULL,
    "TILED_SCAN_X_DIM" integer,
    "TILED_SCAN_Y_DIM" integer,
    "TILED_SCAN_OVERLAP_MICROMETERS" integer,
    "TIMELAPSE_ITERATIONS" integer,
    "TIMELAPSE_INTERVAL_SECONDS" integer,
    "EMISSIONS_WAVELENGTH_NANOMETERS" real NOT NULL,
    PRIMARY KEY ("LIGHTSHEET_SCAN_ID")
);

COMMENT ON TABLE scientific_data."lightsheet_scans"
    IS 'Contains lightsheet scan objects.';

CREATE TABLE scientific_data."lightsheet_configs"
(
    "LIGHTSHEET_CONFIG_ID" bigint NOT NULL,
    "RESEARCHER_ID" bigint NOT NULL,
    "LIGHTSHEET_SOFTWARE_VERSION" character varying NOT NULL,
    "IMAGING_OBJECTIVE_MAGNIFICATION" real NOT NULL,
    "IMAGING_OBJECTIVE_NUMERICAL_APERTURE" real NOT NULL,
    "PROJECTION_OBJECTIVE_NUMERICAL_APERTURE" real NOT NULL,
    "REFRACTIVE_INDEX_IMMERSION" real NOT NULL,
    "LASER_WAVELENGTH" real NOT NULL,
    "NANOMETERS_PER_PIXEL" real NOT NULL,
    "IMAGE_SENSOR_GAIN_DECIBELS" real NOT NULL,
    "IMAGE_SENSOR_EXPOSURE_MILLISECONDS" integer NOT NULL,
    "PIXEL_BIT_DEPTH" integer NOT NULL,
    "PIXEL_FORMAT" character varying NOT NULL,
    PRIMARY KEY ("LIGHTSHEET_CONFIG_ID")
);

COMMENT ON TABLE scientific_data."lightsheet_configs"
    IS 'Contains objects which each represent a particular set of hardware and software settings for the begeron lab lightsheet microscope. (i.e a "config". )';

CREATE TABLE scientific_data."samples"
(
    "SAMPLE_ID" bigint NOT NULL,
    "ANIMAL_ID" bigint NOT NULL,
    "SAMPLE_PREP_PROTOCOL_ID" bigint NOT NULL,
    "RESEARCHER_ID" bigint NOT NULL,
    "DATE_COLLECTED" date NOT NULL,
    "DATE_DESTROYED" date NOT NULL,
    "SAMPLE_TYPE" character varying NOT NULL,
    "STORAGE_TEMP_KELVIN" integer NOT NULL,
    "STORAGE_LOCATION" character varying NOT NULL,
    PRIMARY KEY ("SAMPLE_ID")
);

COMMENT ON TABLE scientific_data."samples"
    IS 'Contains sample objects.';

CREATE TABLE scientific_data."sample_prep_protocols"
(
    "SAMPLE_PREP_PROTOCOL_ID" bigint NOT NULL,
    "RESEARCHER_ID" bigint NOT NULL,
    "PROTOCOL_URL" character varying NOT NULL,
    PRIMARY KEY ("SAMPLE_PREP_PROTOCOL_ID")
);

COMMENT ON TABLE scientific_data."sample_prep_protocols"
    IS 'Contains all info relating to every protocol that was ever used in the lab.';

CREATE TABLE scientific_data."animals"
(
    "ANIMAL_ID" bigint NOT NULL,
    "ANIMAL_FATHER_ID" bigint,
    "ANIMAL_MOTHER_ID" bigint,
    "LIST_OF_OFFSPRING_IDS" bigint[],
    "RESEARCHER_ID" bigint NOT NULL,
    "BIRTH_DATE" date NOT NULL,
    "DEATH_DATE" date,
    "SPECIES" character varying NOT NULL,
    PRIMARY KEY ("ANIMAL_ID")
);

COMMENT ON TABLE scientific_data."animals"
    IS 'Each record is a complete profile for every animal that''s ever passed through the lab.';

CREATE TABLE scientific_data."researchers"
(
    "RESEARCHER_ID" bigint NOT NULL,
    "FIRST_NAME" character varying NOT NULL,
    "LAST_NAME" character varying NOT NULL,
    "PHONE_NUMBERA" character varying NOT NULL,
    "EMAIL" character varying NOT NULL,
    PRIMARY KEY ("RESEARCHER_ID")
);

COMMENT ON TABLE scientific_data."researchers"
    IS 'Each record is a complete profile for every researcher that''s ever been part of the lab.';

ALTER TABLE scientific_data."lightsheet_scans"
    ADD FOREIGN KEY ("SAMPLE_ID")
    REFERENCES scientific_data."samples" ("SAMPLE_ID")
    NOT VALID;


ALTER TABLE scientific_data."samples"
    ADD FOREIGN KEY ("SAMPLE_PREP_PROTOCOL_ID")
    REFERENCES scientific_data."sample_prep_protocols" ("SAMPLE_PREP_PROTOCOL_ID")
    NOT VALID;


ALTER TABLE scientific_data."lightsheet_scans"
    ADD FOREIGN KEY ("LIGHTSHEET_CONFIG_ID")
    REFERENCES scientific_data."lightsheet_configs" ("LIGHTSHEET_CONFIG_ID")
    NOT VALID;


ALTER TABLE scientific_data."lightsheet_scans"
    ADD FOREIGN KEY ("RESEARCHER_ID")
    REFERENCES scientific_data."researchers" ("RESEARCHER_ID")
    NOT VALID;


ALTER TABLE scientific_data."lightsheet_configs"
    ADD FOREIGN KEY ("RESEARCHER_ID")
    REFERENCES scientific_data."researchers" ("RESEARCHER_ID")
    NOT VALID;


ALTER TABLE scientific_data."samples"
    ADD FOREIGN KEY ("ANIMAL_ID")
    REFERENCES scientific_data."animals" ("ANIMAL_ID")
    NOT VALID;


ALTER TABLE scientific_data."samples"
    ADD FOREIGN KEY ("RESEARCHER_ID")
    REFERENCES scientific_data."researchers" ("RESEARCHER_ID")
    NOT VALID;


ALTER TABLE scientific_data."sample_prep_protocols"
    ADD FOREIGN KEY ("RESEARCHER_ID")
    REFERENCES scientific_data."researchers" ("RESEARCHER_ID")
    NOT VALID;

END;
